/*
 * SmartPhotomontage
 * Copyright (C) 2007
 * François Proulx, Olivier Bilodeau, Jean-Philippe Plante, Kim Lebel
 * http://poissonimageediting.googlecode.com
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

package ca.etsmtl.photomontage.ui;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;

import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneLayout;

import org.jdesktop.application.Action;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.SingleFrameApplication;

import ca.etsmtl.photomontage.ui.containers.ImageFramesContainer;
import ca.etsmtl.photomontage.ui.controllers.MenuController;
import ca.etsmtl.photomontage.ui.exceptions.OperationCancelledByUserException;

import com.developpez.gfx.swing.drag.GhostGlassPane;

/**
 * The application's main frame.
 */
public class UIView extends FrameView implements Observer {
	
	// Variables declaration
	private javax.swing.JPanel mainPanel;
	private javax.swing.JDesktopPane mdi;
	private javax.swing.JMenuBar menuBar;
	private javax.swing.JPanel rightpanel;
	private javax.swing.JTabbedPane tabbedPane;

	private JDialog aboutBox;
	private JDialog helpBox;

	// image frame container
	private ImageFramesContainer container = new ImageFramesContainer();

	// ca.etsmtl.photomontage.ui menu controller
	private MenuController menuCtrl = new MenuController();

	// image browser
	private ImageBrowser imagebrowser;
	
	private SelectionBrowser selectionBrowser;

	
	/**
	 * Construtor for the main UIView
	 * @param app
	 */
	public UIView(SingleFrameApplication app) {
		super(app);
		
		// initialisation de tous les components
		initComponents();
	}

	/**
	 * Show Help Box for our application
	 * 
	 * @param e
	 */
	@Action
	public void showHelpBox(ActionEvent e) {
		if (helpBox == null) {
			JFrame mainFrame = UIApp.getApplication().getMainFrame();
			helpBox = new UIHelpBox(mainFrame);
			helpBox.setLocationRelativeTo(mainFrame);
		}
		UIApp.getApplication().show(helpBox);
	}
	
	/**
	 * Show About Box for our application
	 * 
	 * @param e
	 */
	@Action
	public void showAboutBox(ActionEvent e) {
		if (aboutBox == null) {
			JFrame mainFrame = UIApp.getApplication().getMainFrame();
			aboutBox = new UIAboutBox(mainFrame);
			aboutBox.setLocationRelativeTo(mainFrame);
		}
		UIApp.getApplication().show(aboutBox);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 * 
	 * HAHA too late!... ... :'(
	 */
	private void initComponents() {
		
		// Load resource file
		org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application
		.getInstance(ca.etsmtl.photomontage.ui.UIApp.class).getContext().getResourceMap(
				UIView.class);		
		
		GhostGlassPane glassPane = new GhostGlassPane();
        getFrame().setGlassPane(glassPane);
		
		// Our code 
		//TODO: REfactor me please !
		
		// creation du image browser
		ImageBrowser.currentSize = 180;

		// ajouter UIView en temps que observer pour les containers de image
		// frame
		container.addObserver(this);
		
		// initialize major UI components
		mainPanel = new javax.swing.JPanel();
		mdi = new javax.swing.JDesktopPane();
		rightpanel = new javax.swing.JPanel();
		tabbedPane = new javax.swing.JTabbedPane();
		
		// Menu code
		// ---------
		// Let's try to do each menu from left to right
		// TODO reimplement Accelerators for powerusers w/o having the shortcut showing up
		
		menuBar = new javax.swing.JMenuBar();
		menuBar.setName("menuBar"); // NOI18N

		// Document Menu
		javax.swing.JMenu documentMenu = new javax.swing.JMenu();
		documentMenu.setIcon(new ImageIcon(resourceMap.getString("documentMenu.icon")));
		documentMenu.setName("documentMenu");
		// TODO put in a resource file
		documentMenu.setToolTipText("<html>Ajouter une image vide ou importer une image <br>dans la banque d'images</html>"); 
		
		// Nouveau
		javax.swing.JMenuItem newMenuItem = new javax.swing.JMenuItem();
		newMenuItem.setIcon(new ImageIcon(resourceMap.getString("newMenuItem.icon")));
		newMenuItem.setName("newMenuItem"); // NOI18N
		newMenuItem.setText("Nouveau"); // TODO put in a resource file
		newMenuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				newMenuItemActionPerformed(evt);
			}
		});
		documentMenu.add(newMenuItem);
		
		// Ouvrir
		javax.swing.JMenuItem openMenuItem = new javax.swing.JMenuItem();
		openMenuItem.setIcon(new ImageIcon(resourceMap.getString("openMenuItem.icon")));
		openMenuItem.setName("openMenuItem"); // NOI18N
		openMenuItem.setText("Ouvrir"); // TODO put in a resource file
		openMenuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				openMenuItemActionPerformed(evt);
			}
		});
		documentMenu.add(openMenuItem);
		
		menuBar.add(documentMenu);

		// Save Menu
		javax.swing.JMenu saveMenu = new javax.swing.JMenu();
		saveMenu.setIcon(new ImageIcon(resourceMap.getString("saveMenu.icon")));
		saveMenu.setName("saveMenuItem"); // NOI18N
		// TODO put in a resource file
		saveMenu.setToolTipText("Sauvegarder votre création"); 

		
		// Save
		javax.swing.JMenuItem saveMenuItem = new javax.swing.JMenuItem();
		saveMenuItem.setIcon(new ImageIcon(resourceMap.getString("saveMenuItem.icon")));
		saveMenuItem.setText("Enregistrer"); // TODO put in a resource file
		saveMenuItem.setName("saveMenuItem");
		saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveMenuItemActionPerformed(evt);
			}
		});
		saveMenu.add(saveMenuItem);
		
		// Save As
		javax.swing.JMenuItem saveAsMenuItem = new javax.swing.JMenuItem();
		saveAsMenuItem.setIcon(new ImageIcon(resourceMap.getString("saveAsMenuItem.icon")));
		saveAsMenuItem.setText("Enregistrer sous"); // TODO put in a resource file
		saveAsMenuItem.setName("saveMenuItem");
		saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveAsMenuItemActionPerformed(evt);
			}
		});
		saveMenu.add(saveAsMenuItem);
		
		menuBar.add(saveMenu);
		
		// Zoom menu
		javax.swing.JMenu zoomMenu = new javax.swing.JMenu();
		zoomMenu.setIcon(new ImageIcon(resourceMap.getString("zoomMenu.icon")));
		zoomMenu.setName("zoomMenuItem");
		// TODO put in a resource file
		zoomMenu.setToolTipText("Modifier la taille de l'image sélectionnée"); 

		
		// Zoom normal
		javax.swing.JMenuItem zoomNormalMenuItem = new javax.swing.JMenuItem();
		zoomNormalMenuItem.setIcon(new ImageIcon(resourceMap.getString("zoomNormalMenuItem.icon")));
		zoomNormalMenuItem.setText("Taille normale"); // TODO put in a resource file
		zoomNormalMenuItem.setName("zoomNormalMenuItem");
		/*
		zoomNormalMenuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveMenuItemActionPerformed(evt);
			}
		}); */
		zoomMenu.add(zoomNormalMenuItem);
		
		// Zoom In
		javax.swing.JMenuItem zoomInMenuItem = new javax.swing.JMenuItem();
		zoomInMenuItem.setIcon(new ImageIcon(resourceMap.getString("zoomInMenuItem.icon")));
		zoomInMenuItem.setText("Zoom avant"); // TODO put in a resource file
		zoomInMenuItem.setName("zoomInMenuItem");
		/*
		zoomInMenuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveMenuItemActionPerformed(evt);
			}
		}); */
		zoomMenu.add(zoomInMenuItem);
		
		// Zoom Out
		javax.swing.JMenuItem zoomOutMenuItem = new javax.swing.JMenuItem();
		zoomOutMenuItem.setIcon(new ImageIcon(resourceMap.getString("zoomOutMenuItem.icon")));
		zoomOutMenuItem.setText("Zoom arrière"); // TODO put in a resource file
		zoomOutMenuItem.setName("zoomOutMenuItem");
		/*
		zoomOutMenuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveMenuItemActionPerformed(evt);
			}
		});
		*/
		zoomMenu.add(zoomOutMenuItem);
		
		//menuBar.add(zoomMenu);

		// Help menu
		javax.swing.JMenu helpMenu = new javax.swing.JMenu();
		helpMenu.setIcon(new ImageIcon(resourceMap.getString("helpMenu.icon"))); // NOI18N
		helpMenu.setName("helpMenu"); // NOI18N
		// TODO put in a resource file
		helpMenu.setToolTipText("Obtenir de l'aide ou des informations supplémentaires"); 

		
		// Help
		javax.swing.JMenuItem helpMenuItem = new javax.swing.JMenuItem();
		helpMenuItem.setIcon(new ImageIcon(resourceMap.getString("helpMenuItem.icon")));
		helpMenuItem.setText("Aide"); // TODO put in a resource file
		helpMenuItem.setName("helpMenuItem");
		helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				showHelpBox(evt);
			}
		});
		helpMenu.add(helpMenuItem);
		
		// About
		javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
		aboutMenuItem.setIcon(new ImageIcon(resourceMap.getString("aboutMenuItem.icon")));
		aboutMenuItem.setText("À propos de..."); // TODO put in a resource file
		aboutMenuItem.setName("aboutMenuItem"); // NOI18N
		aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				showAboutBox(evt);
			}
		});
		helpMenu.add(aboutMenuItem);
		
		menuBar.add(helpMenu);
		
		// Quit
		javax.swing.JMenu quitMenuItem = new javax.swing.JMenu();
		// workaround to avoid using a JMenuItem (that caused problems)
		// TODO add keyboard listener that will listen to a <Enter>
	    quitMenuItem.addMouseListener(new MouseAdapter() {
	    	public void mousePressed( final MouseEvent e ) {
	    		quitMenuItemActionPerformed();
	    	}
	    });
		quitMenuItem.setIcon(new ImageIcon(resourceMap.getString("quitMenuItem.icon"))); // NOI18N
		// TODO put in a resource file
		quitMenuItem.setToolTipText("Quitter le logiciel"); 


		menuBar.add(quitMenuItem);
		
		// Layout and panel setup
		// ----------------------
		// TODO there is a little annoying gray spacer between mainpanel and the tabbed pane, find it and get rid of it
		
		mainPanel.setName("mainPanel"); // NOI18N

		mdi.setName("mdi"); // NOI18N
		
		rightpanel.setName("rightpanel"); // NOI18N
		
		org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
		mainPanel.setLayout(mainPanelLayout);
		
		mainPanelLayout.setHorizontalGroup(mainPanelLayout
						.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
						.add(mainPanelLayout
										.createSequentialGroup()
										.add(mdi)
										.addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
										.add(tabbedPane,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)));
		mainPanelLayout.setVerticalGroup(mainPanelLayout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(tabbedPane,
				org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
				org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.add(org.jdesktop.layout.GroupLayout.TRAILING, mdi));

		setComponent(mainPanel);
		setMenuBar(menuBar);

		// paramétriser le imageframe et ajouter à l'interface

		//TODO extract tooltip in resource file
		String tooltipBrowserPane = "<html>Cliquez sur une image pour l'ajouter à votre surface de travail.<br/>" +
									"Pour ajouter des images à cette zone aller dans le menu document.</html>";
		// TODO once tooltip is in a resource file, get rid of the alternate constructor for ImageBrowser
		imagebrowser = new ImageBrowser(container, tooltipBrowserPane);
		imagebrowser.setToolTipText(tooltipBrowserPane);
		JScrollPane imageBrowserScrollpane = new JScrollPane(imagebrowser);
		imageBrowserScrollpane.setLayout(new ScrollPaneLayout());
		imageBrowserScrollpane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		imageBrowserScrollpane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		imageBrowserScrollpane.setAlignmentX(JScrollPane.LEFT_ALIGNMENT);
		
		imageBrowserScrollpane.setToolTipText(tooltipBrowserPane);

		//TODO extract tooltip in resource file
		tabbedPane.addTab(null, new ImageIcon(resourceMap.getString("imagesTabbedPane.icon")), imageBrowserScrollpane, "Banque d'images");
		
		// paramétriser le imageframe et ajouter à l'interface
		selectionBrowser = new SelectionBrowser();
		JScrollPane selectionBrowserScrollpane = new JScrollPane(selectionBrowser );
		selectionBrowserScrollpane.setLayout(new ScrollPaneLayout());
		selectionBrowserScrollpane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		selectionBrowserScrollpane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		selectionBrowserScrollpane.setAlignmentX(JScrollPane.LEFT_ALIGNMENT);
		rightpanel.setLayout(new BorderLayout());
		rightpanel.add(selectionBrowserScrollpane);
		//TODO extract tooltip in resource file
		selectionBrowserScrollpane.setToolTipText("<html>Déposer les images découpés ici.<br/>Prendre les images découpés et les déposer sur l'image de destination désirée pour le montage photo.</html>");
				
		tabbedPane.addTab(null, new ImageIcon(resourceMap.getString("selectionTabbedPane.icon")), rightpanel, "Bac de découpage"); //TODO extract tooltip in resource file
		
	}

	private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
		menuCtrl.openImage(imagebrowser);
	}

	private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
		menuCtrl.newImage(imagebrowser);
	}
	
	private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
		if (mdi.getSelectedFrame() != null) {
			new Thread() {
				public void run() {
					//saving...
					ImageFrame f = (ImageFrame) mdi.getSelectedFrame();
					String path = null;
					
					try {
						path = menuCtrl.saveImage(f.getImageHolder().getImage(), f.getImageHolder().getFilename());
					
					} catch (OperationCancelledByUserException e) {}
					
					//set path and change image state
					f.getImageHolder().setFilename(path);
					f.setModified(false);
				}
			}.start();
		}
	}
	
	private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
		if (mdi.getSelectedFrame() != null) {
			new Thread() {
				public void run() {
					//saving...
					ImageFrame f = (ImageFrame) mdi.getSelectedFrame();
					String path = menuCtrl.saveImageAs(f.getImageHolder().getImage());
					
					//set path and change image state
					f.getImageHolder().setFilename(path);
					f.setModified(false);
				}
			}.start();
		}
	}
	
	private void quitMenuItemActionPerformed() {
		int returnValue = JOptionPane.showConfirmDialog(null,
			    "Êtes-vous sûr de vouloir quitter?",
			    "Quitter",
			    JOptionPane.YES_NO_OPTION);
		if (returnValue == JOptionPane.YES_OPTION) {
			UIApp.getApplication().exit();
		}
	}

	/**
	 * Update des observers
	 */
	public void update(Observable arg0, Object arg1) {

		// update pour le container de imageframe
		if (arg0 instanceof ImageFramesContainer) {
			// keep a copy of the components
			ArrayList<ImageFrame> mdiframes = new ArrayList<ImageFrame>();

			// remove old frames
			if (mdi.getComponents().length > 0) {
				for (int i = 0; i < mdi.getComponents().length; i++) {
					if (mdi.getComponent(i) instanceof ImageFrame) {
						ImageFrame frame = (ImageFrame) mdi.getComponent(i);	
						if (!container.contains(frame)) {
							mdi.remove(frame);
						} else {
							mdiframes.add(frame);
						}
					}
				}
			}

			// add new frames
			for (ImageFrame frame : container.getFrames()) {
				if (!mdiframes.contains(frame)) {

					// ajouter le frame dans le desktop et activer le frame
					mdi.add(frame);
					mdi.getDesktopManager().activateFrame(frame);
				}
			}

			// clean mdi frames
			mdiframes = null;
		}
	}

	/**
	 * 
	 * @return the selection browser component
	 */
	public SelectionBrowser getSelectionBrowser() {
		return selectionBrowser;
	}

	/**
	 * 
	 * @return the mdi component
	 */
	public javax.swing.JDesktopPane getImageFramesDesktop() {
		return mdi;
	}
}